package com.example.k5_iot_springboot.이론;

/*
    == 스프링부트 구조 ==
    1. 스프링 (Spring Framework)이란
    : 엔터프라이즈 애플리케이션 개발을 위한 자바 기반 프레임워크
    - 대규모, 복잡한 데이터 관리르 위한 서버 성능, 안정성, 보안 기능 제공
    - 초기 설정 시 XML 설정, 환경 구성 필요 (학습 곡선 높음)

    2. 스프링 부트 (Spring Boot)란
    : 스프링을 쉽고 빠르게 사용할 수 잇도록 지원하는 프레임 워크 확장판
    - 스프링 부트 스타터 제공 (빌드 & 의존성 관리 최소화)
    - XML 설정 없이 JAVA 코드 기반 설정 가능 (Annotation 기반)
    - 내장 WAS(Tomcat 등) 을 포함: 별도 설치 없이 실행 가능
    - JAR 파일만으로 서버 실행 및 배포 가능 (외부 서버 설치 불필요)

    3. 스프링 부트의 동작 구조

    [클라이언트] - [서블릿 컨테이너] - [Dispatcher Servlet]
                                            |
                            뷰 / 핸들러 매핑 / 핸들러 어댑터 / 뷰 리졸버
                                                  |
                                               컨트롤러

    1) 클라이언트 >> 서블릿 컨테이너 >> Dispatcher Servlet(DS)
        : 클라이언트에서 "요청"이 들어오면
            , 서블릿 컨테이너(Tomcat)가 URL 매핑에 따라 해당 요청을 DS로 전달

    2) DS >> 핸들러 매핑
        : 해당 요청 (URL, HTTP 메서드 등)에 대응하느 핸들러(= 컨트롤러 메서드)를 찾음
        - 핸들러 매핑은 적합한 컨트롤러/핸들러 정보를 찾아서 반환

    3) DS >> 핸들러 어뎁터
        : DS가 선택된 핸들러를 실행할 수 있는 어댑터를 찾아 핸들러 어댑터를 호출
        - 해당 어댑터는 실제 컨트롤러와 연결되어 컨트롤러의 메서드를 실행하고
                , 실행 결과(모델 & 뷰 이름 등)를 DS에 반환

        >> 어뎁터
            : 스프링은 컨트롤러 스타일이 다르고 공통 방식으로 호출할 수 있도록 어댑터가 중간에서 표준화
            (@Controller, @RestController 등)

    4) 핸들러 어댑터 >> 컨트롤러
        : 컨트롤러가 요청 파라미터를 받아 비지니스 로직 호출, 모델 데이터 생성, 뷰 이름(String) 등을 반환
        - @ResponseBody & @RestController 인 경우 뷰를 반환하지 않고 바디(JSON 등)로 바로 전달
            >> 뷰/뷰 리졸버 단계가 생략 가능

    5) DS >> 뷰 리졸버
        : 컨트롤러 결과가 뷰 이름이면, DS는 뷰 리졸버에게 실제 뷰 객체로 바꿀 것을 요청 (JSP/Thymeleaf 등)

    6) DS >> 뷰
        : DS가 뷰 객체에 모델 데이터를 넘겨 랜더링을 수행
        (HTML 등이 서블릿 컨테이너를 통해 클라이언트에 응답으로 전송)

*/

public class D_SpringBoot {
}
